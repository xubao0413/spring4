<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd" default-autowire="byName">
	
    <context:property-placeholder location="classpath:db.properties,classpath:second.properties"/>
    <context:component-scan base-package="com.bjsxt.service.impl"></context:component-scan>
    <!-- 数据源 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    	<property name="driverClassName" value="${jdbc.driver}"></property>
    	<property name="url" value="${jdbc.url}"></property>
    	<property name="username" value="${jdbc.username}"></property>
    	<property name="password" value="${jdbc.password}"></property>
    </bean>
    <!-- SqlSessinFactory对象 -->
    <bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="typeAliasesPackage" value="com.bjsxt.pojo"></property>
    </bean>
    <!-- 扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="basePackage" value="com.bjsxt.mapper"></property>
    	<!-- spring使用default-autowire时，优先级比较高。
    	所以，不用通过将上面factory改成sqlSessionFactory，来进行自动注入。
    	原因：自动注入优先级比较高，所以会优先创建ref的对象。此时，创建datasource对象还没加载到properties配置文件的值。
    	所以，就会出错。当然如果在spring没有配置properties文件的加载，上面的配置是不会报错。 -->
    	<!-- <property name="sqlSessionFactory" ref="factory"></property> -->
    	
    	<!-- 基于上面properties配置文件的问题，改成如下配置。因为：自动注入只会影响ref不会影响value。 -->
    	<property name="sqlSessionFactoryBeanName" value="factory"></property>
    </bean>
    <!-- 注入 -->
    <!-- <bean id="usersService" class="com.bjsxt.service.impl.UsersServiceImpl">
    </bean> -->
    
    
    
    <!-- spring事务管理机制 -->
    <bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 配置声明式事务。注意：spring事务管理是基于advice的，因此要配置aop。 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 哪些方法需要有事务控制 -->
			<!-- 方法以ins开头事务管理 -->
			<tx:method name="ins*" />
			<tx:method name="del*"/>
			<tx:method name="upd*"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 切点范围设置大一些 -->
		<aop:pointcut expression="execution(* com.bjsxt.service.impl.*.*(..))"
			id="mypoint" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="mypoint" />
	</aop:config>
	
	
	
	
    <!-- aop cglib动态代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
    <bean id="mybefore" class="com.bjsxt.advice.MyBefore"></bean>
    <bean id="myafter" class="com.bjsxt.advice.MyAfter"></bean>
    <aop:config>
    	<aop:pointcut expression="execution(* com.bjsxt.service.impl.UsersServiceImpl.login(..))" id="mypoint"/>
    	<aop:advisor advice-ref="mybefore" pointcut-ref="mypoint"/>
    	<aop:advisor advice-ref="myafter" pointcut-ref="mypoint"/>
    </aop:config>
</beans>